"use strict";(self.webpackChunkgts_docs_new=self.webpackChunkgts_docs_new||[]).push([[826],{7677:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"advancedspawner/webhook","title":"How to Setup Discord Webhook","description":"---","source":"@site/docs/advancedspawner/webhook.md","sourceDirName":"advancedspawner","slug":"/advancedspawner/webhook","permalink":"/gts-docs/docs/advancedspawner/webhook","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advancedspawner/webhook.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_label":"Discord Webhook","title":"How to Setup Discord Webhook","sidebar_position":5},"sidebar":"advancedspawner","previous":{"title":"Advanced Spawning Setup","permalink":"/gts-docs/docs/advancedspawner/advanced-spawning"},"next":{"title":"Cosmetics Setup","permalink":"/gts-docs/docs/advancedspawner/cosmetics-setup"}}');var o=n(4848),t=n(8453),a=n(3554),i=n.n(a);const l={sidebar_label:"Discord Webhook",title:"How to Setup Discord Webhook",sidebar_position:5},d=void 0,u={},c=[{value:"1. <strong>Sign Up for Cloudflare</strong>",id:"1-sign-up-for-cloudflare",level:2},{value:"2. <strong>Create a Cloudflare Worker</strong>",id:"2-create-a-cloudflare-worker",level:2},{value:"3. <strong>Set Up Your Worker</strong>",id:"3-set-up-your-worker",level:2},{value:"4. <strong>Configure Your Worker</strong>",id:"4-configure-your-worker",level:2},{value:"5. <strong>Deploy the Worker</strong>",id:"5-deploy-the-worker",level:2},{value:"6. <strong>Enable Your Worker</strong>",id:"6-enable-your-worker",level:2}];function h(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i(),{url:"https://www.youtube.com/watch?v=OcrnkINzT_s",controls:!0,width:"100%",height:"360px"}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h1,{id:"how-to-set-up-and-deploy-cloudflare-workers",children:"How to Set Up and Deploy Cloudflare Workers"}),"\n",(0,o.jsxs)(r.h2,{id:"1-sign-up-for-cloudflare",children:["1. ",(0,o.jsx)(r.strong,{children:"Sign Up for Cloudflare"})]}),"\n",(0,o.jsx)(r.p,{children:"To get started with Cloudflare Workers, you first need to sign up for a free Cloudflare account if you don\u2019t already have one. Here's how:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Go to the ",(0,o.jsx)(r.a,{href:"https://www.cloudflare.com/",children:"Cloudflare website"}),"."]}),"\n",(0,o.jsxs)(r.li,{children:["Click on ",(0,o.jsx)(r.strong,{children:"Sign Up"})," and follow the steps to create an account."]}),"\n",(0,o.jsx)(r.li,{children:"Once your account is created and you're logged in, proceed to the next step."}),"\n"]}),"\n",(0,o.jsxs)(r.h2,{id:"2-create-a-cloudflare-worker",children:["2. ",(0,o.jsx)(r.strong,{children:"Create a Cloudflare Worker"})]}),"\n",(0,o.jsx)(r.p,{children:"After logging into Cloudflare, follow these steps to create a new Worker:"}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsxs)(r.li,{children:["From your Cloudflare dashboard, click on the ",(0,o.jsx)(r.strong,{children:"Workers"})," tab on the left sidebar."]}),"\n",(0,o.jsxs)(r.li,{children:["Click the ",(0,o.jsx)(r.strong,{children:"Create a Worker"})," button to start a new Worker project."]}),"\n",(0,o.jsx)(r.li,{children:"This will open a code editor where you can write and edit your worker\u2019s code."}),"\n"]}),"\n",(0,o.jsxs)(r.h2,{id:"3-set-up-your-worker",children:["3. ",(0,o.jsx)(r.strong,{children:"Set Up Your Worker"})]}),"\n",(0,o.jsx)(r.p,{children:"Now, you'll set up your Cloudflare Worker:"}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsxs)(r.li,{children:["In the ",(0,o.jsx)(r.strong,{children:"Code Editor"}),", you'll see a default template with a basic worker function. Delete the default code."]}),"\n",(0,o.jsx)(r.li,{children:"Copy the Cloudflare Worker code provided above and paste it into the editor."}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"This code will listen for POST requests, process the incoming data, and send a rich embed to Discord via a webhook."}),"\n",(0,o.jsxs)(r.h2,{id:"4-configure-your-worker",children:["4. ",(0,o.jsx)(r.strong,{children:"Configure Your Worker"})]}),"\n",(0,o.jsx)(r.p,{children:"There are a few parts of the code that you need to adjust to suit your needs:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Webhook URL:"}),"\r\nLocate the following line in the code:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-js",children:"const discordWebhookUrl = 'https://discord.com/api/webhooks/';\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Replace the URL (",(0,o.jsx)(r.code,{children:"'https://discord.com/api/webhooks/'"}),") with your actual Discord webhook URL.\r\nTo get your Discord webhook URL:"]}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsxs)(r.li,{children:["Open your Discord server and go to ",(0,o.jsx)(r.strong,{children:"Server Settings"}),"."]}),"\n",(0,o.jsxs)(r.li,{children:["Click on ",(0,o.jsx)(r.strong,{children:"Integrations"})," and then ",(0,o.jsx)(r.strong,{children:"Webhooks"}),"."]}),"\n",(0,o.jsx)(r.li,{children:"Create a new webhook or copy an existing one."}),"\n",(0,o.jsx)(r.li,{children:"Paste the copied webhook URL in the above line of code."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Test the Worker:"})," After pasting the code into the editor, click the ",(0,o.jsx)(r.strong,{children:"Save and Deploy"})," button to save your changes and deploy the worker. The worker will then be live and can receive POST requests to the endpoint."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.h2,{id:"5-deploy-the-worker",children:["5. ",(0,o.jsx)(r.strong,{children:"Deploy the Worker"})]}),"\n",(0,o.jsx)(r.p,{children:"To deploy your worker and make it available publicly, follow these steps:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["In the Cloudflare Worker dashboard, after saving the code, click on the ",(0,o.jsx)(r.strong,{children:"Deploy"})," button."]}),"\n",(0,o.jsxs)(r.li,{children:["Cloudflare will give you a ",(0,o.jsx)(r.strong,{children:"subdomain"})," under ",(0,o.jsx)(r.code,{children:"workers.dev"})," where your worker can be accessed. This is the endpoint you\u2019ll use to interact with your worker (e.g., ",(0,o.jsx)(r.code,{children:"https://your-worker-subdomain.workers.dev/"}),")."]}),"\n"]}),"\n",(0,o.jsxs)(r.h2,{id:"6-enable-your-worker",children:["6. ",(0,o.jsx)(r.strong,{children:"Enable Your Worker"})]}),"\n",(0,o.jsx)(r.p,{children:"Replace the workers URL in your SpawnerConfig to the workers.dev link that Cloudflare gave you."}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-js",metastring:'showLineNumbers title="Cloudflare Worker"',children:"export default {\r\n  async fetch(request) {\r\n    if (request.method !== 'POST') {\r\n      return new Response('Method not allowed', { status: 405 });\r\n    }\r\n\r\n    try {\r\n      const contentType = request.headers.get('Content-Type') || '';\r\n      if (!contentType.includes('application/json')) {\r\n        return new Response('Invalid content type', { status: 400 });\r\n      }\r\n\r\n      const { author, message, color, busNumber, username, userId, userTag, messageType, serverType, groupRole, serverMessage } = await request.json();\r\n\r\n      if (!author || !message || !color || !username || !userId || !userTag || !messageType || !serverType || !groupRole || !serverMessage) {\r\n        return new Response(\r\n          JSON.stringify({ error: 'Missing required fields' }),\r\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n      }\r\n\r\n      // Fetch thumbnail from Roblox Thumbnails API\r\n      const thumbnailApiUrl = `https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=${userId}&size=420x420&format=Png&isCircular=false&thumbnailType=HeadShot`;\r\n      const thumbnailResponse = await fetch(thumbnailApiUrl);\r\n\r\n      if (!thumbnailResponse.ok) {\r\n        return new Response(\r\n          JSON.stringify({ error: 'Failed to fetch thumbnail from Roblox', details: await thumbnailResponse.text() }),\r\n          { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n      }\r\n\r\n      const thumbnailData = await thumbnailResponse.json();\r\n      const thumbnailUrl = thumbnailData.data[0]?.imageUrl || 'https://via.placeholder.com/420';\r\n\r\n      // Get current Unix timestamp\r\n      const currentTimestamp = Math.floor(Date.now() / 1000);\r\n\r\n      let description, fields, colorCode;\r\n\r\n      if (messageType === 'spawn') {\r\n        description = `A bus was spawned!`;\r\n        fields = [\r\n          {\r\n            name: \"Bus Number\",\r\n            value: busNumber,\r\n            inline: true\r\n          },\r\n          {\r\n            name: \"Spawned By\",\r\n            value: `${username} (@${userTag})`,\r\n            inline: true\r\n          },\r\n          {\r\n            name: \"Server Type\",\r\n            value: serverType,\r\n            inline: true\r\n          },\r\n          {\r\n            name: \"Users Group Role\",\r\n            value: groupRole,\r\n            inline: true\r\n          },\r\n          {\r\n            name: \"Spawned At\",\r\n            value: `<t:${currentTimestamp}:F>\\n<t:${currentTimestamp}:R>`,\r\n            inline: false\r\n          }\r\n        ];\r\n      } else if (messageType === 'despawn') {\r\n        description = `A bus was despawned!`;\r\n        fields = [\r\n          {\r\n            name: \"Bus Number\",\r\n            value: busNumber,\r\n            inline: true\r\n          },\r\n          {\r\n            name: \"Despawned By\",\r\n            value: `${username} (@${userTag})`,\r\n            inline: true\r\n          },\r\n           {\r\n            name: \"Server Type\",\r\n            value: serverType,\r\n            inline: true\r\n          },\r\n          {\r\n            name: \"Users Group Role\",\r\n            value: groupRole,\r\n            inline: true\r\n          },\r\n          {\r\n            name: \"Despawned At\",\r\n            value: `<t:${currentTimestamp}:F>\\n<t:${currentTimestamp}:R>`,\r\n            inline: false\r\n          }\r\n        ];\r\n      } else if (messageType === 'globalAnnouncement') {\r\n          description = `A global announcement has been made!`;\r\n          fields = [\r\n            {\r\n              name: \"Global Announcement\",\r\n              value: serverMessage,\r\n              inline: true\r\n            },\r\n           {\r\n              name: \"Server Type\",\r\n              value: serverType,\r\n              inline: true\r\n            },\r\n            {\r\n              name: \"Users Group Role\",\r\n              value: groupRole,\r\n              inline: true\r\n            },\r\n            {\r\n              name: \"Announced By\",\r\n              value: `${username} (@${userTag})`,\r\n              inline: true\r\n            },\r\n            {\r\n              name: \"Announced At\",\r\n              value: `<t:${currentTimestamp}:F>\\n<t:${currentTimestamp}:R>`,\r\n              inline: false\r\n            }\r\n          ];\r\n      } else if (messageType === 'serverAnnouncement') {\r\n          description = `A server announcement has been made!`;\r\n          fields = [\r\n            {\r\n              name: \"Server Announcement\",\r\n              value: serverMessage,\r\n              inline: true\r\n            },\r\n           {\r\n              name: \"Server Type\",\r\n              value: serverType,\r\n              inline: true\r\n            },\r\n            {\r\n              name: \"Users Group Role\",\r\n              value: groupRole,\r\n              inline: true\r\n            },\r\n            {\r\n              name: \"Announced By\",\r\n              value: `${username} (@${userTag})`,\r\n              inline: true\r\n            },\r\n            {\r\n              name: \"Announced At\",\r\n              value: `<t:${currentTimestamp}:F>\\n<t:${currentTimestamp}:R>`,\r\n              inline: false\r\n            }\r\n          ];\r\n          } else if (messageType === 'refuelbus') {\r\n          description = `A bus has been refueled by an admin!`;\r\n          fields = [\r\n            {\r\n              name: \"Bus Number\",\r\n              value: busNumber,\r\n              inline: true\r\n            },\r\n           {\r\n              name: \"Server Type\",\r\n              value: serverType,\r\n              inline: true\r\n            },\r\n            {\r\n              name: \"Users Group Role\",\r\n              value: groupRole,\r\n              inline: true\r\n            },\r\n            {\r\n              name: \"Refueled By\",\r\n              value: `${username} (@${userTag})`,\r\n              inline: true\r\n            },\r\n            {\r\n              name: \"Refueled At\",\r\n              value: `<t:${currentTimestamp}:F>\\n<t:${currentTimestamp}:R>`,\r\n              inline: false\r\n            }\r\n          ];\r\n      }  else {\r\n        return new Response(\r\n          JSON.stringify({ error: `Unsupported messageType: ${messageType}` }),\r\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n      }\r\n\r\n      switch (messageType) {\r\n        case 'spawn':\r\n            colorCode = 0x00ff00; // Green for spawn\r\n            break;\r\n        case 'refuelbus':\r\n          colorCode = 0x0000ff; // Blue for refuelbus\r\n            break;\r\n        case 'despawnplayersbus':\r\n          colorCode = 0xffff00; // Yellow for despawnplayersbus\r\n            break;\r\n        case 'serverAnnouncement':\r\n          colorCode = 0xffa500; // Orange for server announcements\r\n            break;\r\n        case 'globalAnnouncement':\r\n          colorCode = 0x800080; // Purple for global announcements\r\n            break;\r\n        default:\r\n          colorCode = 0xff0000; // Red as a fallback for any unknown type\r\n            break;\r\n    }\r\n\r\n      // Create the Discord embed with footer\r\n      const embedPayload = {\r\n        embeds: [{\r\n          author: {name: author},\r\n          title: author,\r\n          description: description,\r\n          color: colorCode,\r\n          fields,\r\n          thumbnail: {\r\n            url: thumbnailUrl\r\n          },\r\n          footer: {\r\n            text: \"Powered by GTS Assets\"\r\n          },\r\n          timestamp: new Date().toISOString()\r\n        }]\r\n      };\r\n\r\n      const discordWebhookUrl = 'https://discord.com/api/webhooks/';\r\n      const discordResponse = await fetch(discordWebhookUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(embedPayload)\r\n      });\r\n\r\n      if (!discordResponse.ok) {\r\n        return new Response(\r\n          JSON.stringify({ error: 'Discord Error', details: await discordResponse.text() }),\r\n          { status: discordResponse.status, headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n      }\r\n\r\n      return new Response(\r\n        JSON.stringify({ status: 'Message sent successfully!' }),\r\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    } catch (err) {\r\n      return new Response(\r\n        JSON.stringify({ error: err.message }),\r\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n  },\r\n};\n"})}),"\n",(0,o.jsx)(r.admonition,{type:"note",children:(0,o.jsxs)(r.p,{children:["Still need support? Join our ",(0,o.jsx)(r.a,{href:"https://discord.gg/5k85S4KWSR",children:"Discord Server"})," for help!"]})})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);